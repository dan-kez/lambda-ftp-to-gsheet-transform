service: editrade-sync
# app and org for use with dashboard.serverless.com
app: generalized-editrade-customs-sync
org: dankez

package:
  exclude:
    - node_modules/**
    - venv/**

custom:
  bucket: ${env:S3_BUCKET_NAME}
  alerts:
    stages:
      - prod
    topics:
      alarm:
        topic: ${self:service}-${opt:stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: ${env:ALERTING_EMAIL_ADDRESS}
    alarms:
      - functionThrottles

provider:
  name: aws
  runtime: python3.8
  stage: dev
  environment:
    USE_PARAMETER_STORE: True
    STAGE: ${opt:stage, self:provider.stage}
    DYNAMO_HOST: ""
  deploymentBucket:
    blockPublicAccess: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:ListObjects
        - s3:ListObjectsV2
        - s3:ListBucket
        - s3:ListBucket
      Resource:
        - "arn:aws:s3:::${self:custom.bucket}"
        - "arn:aws:s3:::${self:custom.bucket}/*"
    - Effect: Allow
      Action:
        - dynamodb:BatchGet*
        - dynamodb:DescribeStream
        - dynamodb:DescribeTable
        - dynamodb:Get*
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:BatchWrite*
        - dynamodb:CreateTable
        - dynamodb:Delete*
        - dynamodb:Update*
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/gen-editrade-sync__prod*"
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource: "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/*"

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-python-requirements
  - serverless-plugin-aws-alerts
  - serverless-dotenv-plugin

functions:
  checkNewFilesFunc:
    handler: src/handler.checknewfiles
    package: {}
    timeout: 60
  downloadAndProcessEditradeFile:
    handler: src/handler.downloadandprocesseditradefile
    package: {}
    timeout: 60
  updategooglesheets:
    handler: src/handler.updategooglesheets
    package: {}
    timeout: 120
    events:
      - schedule:
          rate: rate(10 minutes)
          input:
            minutes: 11

resources: # CloudFormation template syntax
  Resources:
    GeneralizedEditradeCustomsSyncLogs:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/apigateway/GeneralizedEditradeCustomsSyncLogs-Logs

stepFunctions:
  stateMachines:
    checkNewFiles:
      type: EXPRESS
      loggingConfig:
        level: ERROR
        includeExecutionData: true
        destinations:
          - Fn::GetAtt: [GeneralizedEditradeCustomsSyncLogs, Arn]
      events:
        - schedule:
            rate: rate(10 minutes)
            enabled: true
      name: generalized-editrade-customs-sync
      definition:
        Comment: "Check if there are files to sync from editrade FTP"
        StartAt: CheckNewFiles
        States:
          CheckNewFiles:
            Type: Task
            Resource:
              Fn::GetAtt: [checkNewFilesFunc, Arn]
            Next: MapDownloadAndProcessEditradeFile
            Catch:
              - ErrorEquals: ["NoFilesToProcess"]
                Next: ErrorNoFilesToProcess
          MapDownloadAndProcessEditradeFile:
            Type: Map
            MaxConcurrency: 1
            Iterator:
              StartAt: DownloadAndProcessEditradeFile
              States:
                DownloadAndProcessEditradeFile:
                  Type: Task
                  Resource:
                    Fn::GetAtt: [downloadAndProcessEditradeFile, Arn]
                  End: true
            End: true
          # Error states
          ErrorNoFilesToProcess:
            Type: Pass
            Result: "No files have to be processed"
            End: true

  validate: true # enable pre-deployment definition validation (disabled by default)
