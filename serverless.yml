# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: editrade-sync
# app and org for use with dashboard.serverless.com
app: generalized-editrade-customs-sync
org: dankez

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

package:
  exclude:
    - node_modules/**
    - venv/**

provider:
  name: aws
  runtime: python3.8

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-python-requirements
#  - serverless-plugin-aws-alerts
  - serverless-dotenv-plugin

functions:
  checkNewFilesFunc:
    handler: handler.checknewfiles
  downloadAndProcessEditradeFile:
    handler: handler.downloadandprocesseditradefile

stepFunctions:
  stateMachines:
    checkNewFiles:
      type: EXPRESS
      events:
        - schedule:
            rate: rate(10 minutes)
            enabled: true
            input:
              key1: value1
              key2: value2
              stageParams:
                stage: dev
      name: generalized-editrade-customs-sync
      definition:
        Comment: "Check if there are files to sync from editrade FTP"
        StartAt: CheckNewFiles
        States:
          CheckNewFiles:
            Type: Task
            Resource:
              Fn::GetAtt: [checkNewFilesFunc, Arn]
            Next: MapDownloadAndProcessEditradeFile
            Catch:
              - ErrorEquals: ["NoFilesToProcess"]
                Next: ErrorNoFilesToProcess
          MapDownloadAndProcessEditradeFile:
            Type: Map
            Iterator:
              StartAt: DownloadAndProcessEditradeFile
              States:
                DownloadAndProcessEditradeFile:
                  Type: Task
                  Resource:
                    Fn::GetAtt: [downloadAndProcessEditradeFile, Arn]
                  End: true
            End: true
          # Error states
          ErrorNoFilesToProcess:
            Type: Pass
            Result: "No files have to be processed"
            End: true
#      alarms:
#        topics:
#          ok: arn:aws:sns:us-east-1:1234567890:NotifyMe
#          alarm: arn:aws:sns:us-east-1:1234567890:NotifyMe
#          insufficientData: arn:aws:sns:us-east-1:1234567890:NotifyMe
#        metrics:
#          - executionsTimedOut
#          - executionsFailed
#          - executionsAborted
#          - metric: executionThrottled
#            treatMissingData: breaching # overrides below default
#        treatMissingData: ignore # optional

  validate: true # enable pre-deployment definition validation (disabled by default)

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
